{"version":3,"sources":["components/img/awesome.svg","components/img/happy.svg","components/img/okay.svg","components/img/sad.svg","components/img/angry.svg","components/img/awesome_green.svg","components/img/happy_yellow.svg","components/img/okay_orange.svg","components/img/sad_blue.svg","components/img/angry_red.svg","components/img/right_arrow.svg","components/img/left_arrow.svg","components/TextEditor/TextEditor.js","components/TextEditor/Formatting/BoldMark.js","components/TextEditor/Formatting/ItalicMark.js","components/TextEditor/Formatting/UnderlineMark.js","components/TextEditor/Formatting/CodeBlock.js","components/StartPage/StartPage.js","components/MoodDatePicker/MoodDatePicker.js","components/Moods/MoodPicker.js","components/Stats/BarChart.js","components/EntryLogger.js","components/Entries/Entries.js","components/Activities/Activities.js","components/Navigation/Navigation.js","components/Stats/Stats.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TextEditor","_this$props","this","props","storeItems","basicActivities","pickActivities","react_default","a","createElement","Container_default","className","react_router_dom","to","src","LeftArrow","alt","slate_react_es","value","placeholder","onChange","onKeyDown","renderNode","renderMark","components_Activities_Activities","onClick","React","Component","BoldMark","children","ItalicMark","UnderlineMark","CodeBlock","attributes","StartPage","showNextButton","_this","chosenMood","RightArrow","chooseMood","moodList","pickedDate","Fragment","components_MoodDatePicker_MoodDatePicker","handleChange","MoodPicker","MoodDatePicker","es","selected","dateFormat","withPortal","MainMoods","map","mood","label","activeSrc","key","id","displayMoodList","BarChart","barData","victory_chart","domainPadding","domain","y","style","parent","width","paddingTop","victory_bar","data","initialValue","Value","fromJSON","document","nodes","object","type","leaves","EntryLogger","state","textEditorNote","_ref","setState","storeCurrentNote","text","chosenActivities","moodDatas","getMoodLog","newMoodItem","date","notes","activities","console","log","push","localStorage","setItem","JSON","stringify","moodCounter","resetValues","resetEditor","note","event","editor","next","ctrlKey","preventDefault","toggleMark","isCode","blocks","some","block","setBlocks","mark","Formatting_BoldMark","Formatting_ItalicMark","Formatting_UnderlineMark","node","Formatting_CodeBlock","_this2","_this$props2","react_router","path","render","components_TextEditor_TextEditor","Entries","moodData","sort","b","entry","displayedImage","item","srcActive","Date","toLocaleDateString","join","displayEntryItems","Activities","activity","num","ToggleButtonGroup_default","ToggleButton_default","displayActivities","Navigation","Stats","moodLog","Stats_BarChart","Awesome","AwesomeActive","Happy","HappyActive","Okay","OkayActive","Angry","AngryActive","Sad","SadActive","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","clickedMood","target","parse","getItem","moodCount","filter","length","clickedActivity","includes","uniqueActivities","updatedActivities","concat","prepareBarChart","x","moods","now","_this$state","components_Navigation_Navigation","exact","components_StartPage_StartPage","components_Entries_Entries","components_Stats_Stats","components_EntryLogger","Boolean","window","location","hostname","match","ReactDOM","basename","process","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ae896a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/awesome.27709a81.svg\";","module.exports = __webpack_public_path__ + \"static/media/happy.e0cfa853.svg\";","module.exports = __webpack_public_path__ + \"static/media/okay.6eac3c27.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad.a9f89e91.svg\";","module.exports = __webpack_public_path__ + \"static/media/angry.45dd416e.svg\";","module.exports = __webpack_public_path__ + \"static/media/awesome_green.6e5beaeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/happy_yellow.c27d259c.svg\";","module.exports = __webpack_public_path__ + \"static/media/okay_orange.983cbac5.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad_blue.e7e812bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/angry_red.4f243372.svg\";","module.exports = __webpack_public_path__ + \"static/media/right_arrow.6ef52c6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/left_arrow.b369a94e.svg\";","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Editor } from 'slate-react';\r\nimport { Link } from \"react-router-dom\";\r\nimport './TextEditor.scss'\r\nimport { Activities } from '../../components/compIndex'\r\nimport LeftArrow from '../img/left_arrow.svg'\r\n\r\nclass TextEditor extends React.Component {\r\n    render() {\r\n        const { storeItems, basicActivities, pickActivities } = this.props\r\n        \r\n        return (\r\n            <Container>\r\n                <div className=\"float-left\">\r\n                    <Link to=\"/\"><img src={ LeftArrow } alt='leftArrow' className='goBack' /></Link>\r\n                </div>\r\n                <div className=\"editorContainer ml-5 position-absolute\">\r\n                    <div>\r\n                        <div className=\"title mb-2\"> Thoughts </div>\r\n                        <Editor \r\n                            className=\"textEditor p-4\"\r\n                            value={ this.props.value } \r\n                            placeholder=\"Enter thoughts\"\r\n                            onChange={ this.props.onChange } \r\n                            onKeyDown={ this.props.onKeyDown }\r\n                            renderNode={ this.props.renderNode }\r\n                            renderMark={ this.props.renderMark }\r\n                        />\r\n                    </div>\r\n                    <Activities \r\n                            pickActivities={ pickActivities }\r\n                            basicActivities={ basicActivities }\r\n                    />\r\n                    <div className=\"text-center mt-5 ml-5\">\r\n                        <Link to=\"/\"><button onClick={ storeItems } className=\"save\"> Save </button></Link>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TextEditor;","import React from 'react'\r\n\r\nconst BoldMark = props => (\r\n    <strong>\r\n        { props.children }\r\n    </strong>\r\n);\r\n\r\nexport default BoldMark;\r\n","import React from 'react'\r\n\r\nconst ItalicMark = props => (\r\n    <em>\r\n        { props.children }\r\n    </em>\r\n);\r\n\r\nexport default ItalicMark;","import React from 'react'\r\n\r\nconst UnderlineMark = props => (\r\n    <u>\r\n        { props.children }\r\n    </u>\r\n);\r\n\r\nexport default UnderlineMark;","import React from 'react'\r\n\r\nconst CodeBlock = props => (\r\n    <pre { ...props.attributes }>\r\n        <code> { props.children } </code>\r\n    </pre>\r\n);\r\n\r\nexport default CodeBlock;","import React, { Component } from 'react'\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { MoodPicker, MoodDatePicker, RightArrow } from '../../components/compIndex'\r\nimport '../../scss/main.scss'\r\n\r\nclass StartPage extends Component {\r\n    showNextButton = () => {\r\n        const { chosenMood } = this.props;\r\n\r\n        if ( chosenMood !== null )\r\n            return <img src={ RightArrow } className='nextButton mt-5' alt='arrow'/> \r\n    }\r\n\r\n    render() {\r\n        const { chooseMood, moodList, chosenMood, pickedDate, onChange } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"moodChooser text-center position-absolute\">\r\n                    <h1> How are you feeling? </h1>\r\n                    <MoodDatePicker \r\n                            pickedDate={ pickedDate }\r\n                            handleChange={ onChange }\r\n                    /> \r\n                    <MoodPicker \r\n                            chooseMood={ chooseMood } \r\n                            moodList={ moodList } \r\n                            chosenMood={ chosenMood }\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"float-right\">\r\n                    <Link to=\"/editor\"> { this.showNextButton() } </Link>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StartPage;\r\n","import React, { Component } from 'react'\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport '../../scss/main.scss'\r\n\r\nclass MoodDatePicker extends Component {\r\n    render() {\r\n        const { pickedDate, handleChange } = this.props\r\n        return (\r\n            <div>\r\n                <DatePicker\r\n                    selected={ pickedDate }\r\n                    onChange={ handleChange }\r\n                    dateFormat=\"dd/MM/yyyy\"\r\n                    withPortal\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  MoodDatePicker;","import React, { Component } from 'react'\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport '../../scss/main.scss'\r\n\r\nclass MainMoods extends Component {\r\n    displayMoodList() {\r\n        const { chooseMood, moodList, chosenMood } = this.props\r\n\r\n        let displayedMoods = moodList.map( ( mood ) => {\r\n            let src;\r\n            if ( mood.label === chosenMood )\r\n                src = mood.activeSrc\r\n            else    \r\n                src = mood.src\r\n\r\n            return (\r\n                <li key={ mood.label } className=\"mood p-3\">\r\n                    <img src={ src } \r\n                        id={ mood.label } \r\n                        alt={ mood.label } \r\n                        onClick={ chooseMood }\r\n                    />\r\n                </li>\r\n            )\r\n        })\r\n\r\n        return displayedMoods\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <ul className=\"moodList mt-4\">\r\n                    { this.displayMoodList() }\r\n                </ul>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainMoods;","import React from 'react';\r\n\r\nimport { VictoryBar, VictoryChart } from 'victory';\r\n\r\nclass BarChart extends React.Component {\r\n    render() {\r\n        const { barData } = this.props\r\n        \r\n        return (\r\n            <div>\r\n                <VictoryChart domainPadding={ 30 } \r\n                            domain={{ y: [0, 10] }}\r\n                            style={{ parent: { width: \"55em\", paddingTop: \"8em\" } }}\r\n                >\r\n                    <VictoryBar data={ barData }/>\r\n                </VictoryChart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BarChart;\r\n","import React, { Component } from 'react'\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Value } from 'slate';\r\nimport { Route } from \"react-router-dom\";\r\nimport { TextEditor, BoldMark, ItalicMark, UnderlineMark, CodeBlock } from './compIndex.js';\r\nimport './TextEditor/TextEditor.scss';\r\n\r\nconst initialValue = Value.fromJSON({\r\n    document: {\r\n        nodes: [\r\n            {\r\n                object: 'block',\r\n                type: 'paragraph',\r\n                nodes: [\r\n                    {\r\n                        object: 'text',\r\n                        leaves: [\r\n/*                             {\r\n                                text: 'Bitch ass paragraph.',\r\n                            },  */\r\n                        ],\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n})\r\nclass EntryLogger extends Component {\r\n    // Set initial value when app is first constructed\r\n    state = {\r\n        value: initialValue,\r\n        textEditorNote: null\r\n    }\r\n\r\n    onChange = ({ value }) => {\r\n        this.setState({ value });\r\n        this.storeCurrentNote( this.state.value.document.text )\r\n    }\r\n\r\n    // stores mood and date of mood item that is clicked on\r\n    storeItems = ( ) => {\r\n        const { chosenMood, pickedDate, chosenActivities } = this.props\r\n        const { textEditorNote } = this.state\r\n        \r\n        let moodDatas = this.props.getMoodLog()\r\n        const newMoodItem = { mood: chosenMood, date: pickedDate, notes: textEditorNote, activities: chosenActivities }\r\n        \r\n        // if localStorage is empty, create an array\r\n        if ( moodDatas === null ) {\r\n            moodDatas = [ ]\r\n        }\r\n        \r\n        console.log( \"pickedDate\" )\r\n        console.log( pickedDate )\r\n        // push new mood item to localStorage\r\n        moodDatas.push( newMoodItem )\r\n        // update MoodLog by setting it\r\n        localStorage.setItem( 'moodLog', JSON.stringify( moodDatas ))\r\n        \r\n        this.props.moodCounter()\r\n\r\n        // resetting value\r\n        this.props.resetValues()\r\n        this.resetEditor()\r\n    };\r\n\r\n    storeCurrentNote = ( note ) => {\r\n        this.setState({\r\n            textEditorNote: note\r\n        })\r\n    }\r\n    \r\n    resetEditor = () => {\r\n        this.setState({\r\n            value: initialValue\r\n        })\r\n    }\r\n\r\n    // Define a new handler which prints the key that was pressed.\r\n    onKeyDown = ( event, editor, next ) => {\r\n        //console.log( event.key )\r\n        if ( !event.ctrlKey ) return next();\r\n\r\n        //Decide what to do based on the key code\r\n        switch ( event.key ) \r\n        {\r\n            case 'b':\r\n                event.preventDefault()\r\n                editor.toggleMark('bold')\r\n            break\r\n\r\n            case 'i':\r\n                event.preventDefault()\r\n                editor.toggleMark('italic')\r\n            break\r\n\r\n            case 'u':\r\n                event.preventDefault()\r\n                editor.toggleMark('underline')\r\n            break\r\n\r\n            case 'c':\r\n                const isCode = editor.value.blocks.some(block => block.type === 'code')\r\n                event.preventDefault()\r\n                editor.setBlocks( isCode ? 'paragraph' : 'code' )\r\n                break\r\n\r\n            default:\r\n                return next()\r\n        }\r\n    }\r\n\r\n    // Method to render marks\r\n    renderMark = ( props, editor, next ) => {\r\n        switch ( props.mark.type ) \r\n        {\r\n            case 'bold':\r\n                return <BoldMark { ...props } />\r\n\r\n            case 'italic':\r\n                return <ItalicMark { ...props } />\r\n\r\n            case 'underline':\r\n                return <UnderlineMark { ...props } />\r\n\r\n            default:\r\n                return next()\r\n        }\r\n    }\r\n\r\n    // Method to render nodes for code blocks.\r\n    renderNode = ( props, editor, next ) => {\r\n        switch ( props.node.type ) {\r\n            case 'code':\r\n                return <CodeBlock { ...props } />\r\n        \r\n            default:\r\n                return next()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { basicActivities, pickActivities } = this.props\r\n        \r\n        return (\r\n            <Container>\r\n                <Route path=\"/editor\" render={ (props) => <TextEditor \r\n                        storeItems={ this.storeItems }\r\n                        storeCurrentNote={ this.storeCurrentNote }\r\n                        value={ this.state.value } \r\n                        onChange={ this.onChange } \r\n                        onKeyDown={ this.onKeyDown }\r\n                        renderNode={ this.renderNode }\r\n                        renderMark={ this.renderMark }\r\n                        basicActivities={ basicActivities }\r\n                        pickActivities={ pickActivities }\r\n                />} />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EntryLogger;","import React, { Component } from 'react'\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nimport '../../scss/main.scss'\r\n\r\nclass Entries extends Component {\r\n    displayEntryItems() {\r\n        const { moodList } = this.props\r\n\r\n        let moodData = this.props.getMoodLog()\r\n        console.log( moodData )\r\n\r\n        if ( moodData === null ) {\r\n            return <h1> No entries </h1>\r\n        } else {\r\n            let displayedEntries = moodData\r\n            .sort(( a, b ) => {\r\n                if ( a.date > b.date ) {\r\n                    return -1\r\n                } else if ( a.date < b.date ) {\r\n                    return 1\r\n                } else {\r\n                    return 0\r\n                }\r\n            })\r\n            .map( ( entry ) => {\r\n                let displayedImage = moodList.map( ( item ) => {\r\n                    let src;\r\n\r\n                    if ( entry.mood === item.label ) {\r\n                        src = item.activeSrc\r\n                    } else {\r\n                        \r\n                        return;\r\n                    }\r\n\r\n                    return(\r\n                        <div key={ item.srcActive }>\r\n                            <img src={ src } \r\n                                className=\"entryMoodImg float-left mr-4\"\r\n                                alt={ item.label } \r\n                            />\r\n                        </div>\r\n                    )\r\n                }) \r\n\r\n                return (\r\n                    <li key={ entry.notes } className=\"entry mt-4 ml-5 p-3\">\r\n                        <h1 className=\"imgEntry\" > { displayedImage } </h1>\r\n                        <h1 className=\"dateEntry\" > { new Date( entry.date ).toLocaleDateString('en-GB') } </h1>\r\n                        <h1 className=\"moodEntry mt-4\"> { entry.mood } </h1><br />\r\n                        <h1 className=\"noteEntry mb-4 ml-1\"> { entry.notes } </h1><br />\r\n                        <div className=\"activityEntry ml-5 pl-5\"> { entry.activities.join(\"\\xa0\\xa0\\xa0\\xa0\") } </div>\r\n                    </li>\r\n                )\r\n            })\r\n\r\n            return displayedEntries\r\n        }\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <ul className=\"entries\">\r\n                    { this.displayEntryItems() }\r\n                </ul>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Entries;","import React, { Component } from 'react'\r\n\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\r\nimport ToggleButton from 'react-bootstrap/ToggleButton'\r\nimport '../../scss/main.scss'\r\n\r\nclass Activities extends Component {\r\n    displayActivities() {\r\n        const { basicActivities, pickActivities } = this.props\r\n\r\n        return basicActivities.map( ( activity ) => {\r\n            return <div key={ activity.num } \r\n                        className=\"d-inline\"\r\n                    >\r\n                        <ToggleButtonGroup type=\"checkbox\"> \r\n                            <ToggleButton id={ activity.label }\r\n                                        onClick={ pickActivities }\r\n                                        className=\"activity m-2\"\r\n                            >\r\n                                { activity.label } \r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </div>\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"activityTitle mt-5\"> Activities </div>\r\n                <div className=\"activityContainer text-center\">\r\n                    { this.displayActivities() }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Activities;","import React, { Component } from 'react'\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport '../../scss/main.scss'\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"navLinks float-right mt-3\">\r\n                    <Link to=\"/\" className=\"nav d-inline pr-3\"> Home </Link>\r\n                    <Link to=\"/entries\" className=\"nav d-inline pr-3\"> Entries </Link>\r\n                    <Link to=\"/stats\" className=\"nav d-inline\"> Stats </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react'\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport { BarChart } from '../../components/compIndex'\r\n\r\nclass Stats extends Component {\r\n    render() {\r\n        const { barData, moodLog } = this.props\r\n        \r\n        return (\r\n            <Container>\r\n                <div>\r\n                    {\r\n                        !moodLog \r\n                        ? <h1> No data, GTFO </h1> \r\n                        : (\r\n                            <>\r\n                                <BarChart barData={ barData } />\r\n                            </>\r\n                        )\r\n                    }\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stats;","import React, { Component } from 'react';\r\n\r\nimport { Route } from \"react-router-dom\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Stats, Navigation, Entries, EntryLogger, StartPage } from './components/compIndex.js';\r\nimport { Awesome, Happy, Okay, Sad, Angry, AwesomeActive, HappyActive, OkayActive, SadActive, AngryActive } from './components/compIndex.js';\r\nimport './App.scss';\r\n\r\nlet moodList = [\r\n    { \r\n        src: Awesome,\r\n        activeSrc: AwesomeActive,\r\n        label: \"Awesome\"\r\n    },\r\n    { \r\n        src: Happy,\r\n        activeSrc: HappyActive,\r\n        label: \"Happy\"\r\n    },\r\n    { \r\n        src: Okay,\r\n        activeSrc: OkayActive,\r\n        label: \"Okay\"\r\n    },\r\n    { \r\n        src: Angry,\r\n        activeSrc: AngryActive,\r\n        label: \"Angry\"\r\n    },\r\n    { \r\n        src: Sad,\r\n        activeSrc: SadActive,\r\n        label: \"Sad\"\r\n    }\r\n];\r\n\r\nlet basicActivities = [\r\n    { \r\n        label: \"Work\",\r\n        num: \"1\"\r\n    },\r\n    { \r\n        label: \"Sport\",\r\n        num: \"2\"\r\n    },\r\n    { \r\n        label: \"Friends\",\r\n        num: \"3\"\r\n    },\r\n    { \r\n        label: \"Good meal\",\r\n        num: \"4\"\r\n    },\r\n    { \r\n        label: \"Shopping\",\r\n        num: \"5\"\r\n    },\r\n    { \r\n        label: \"Relax\",\r\n        num: \"6\"\r\n    },\r\n    { \r\n        label: \"Reading\",\r\n        num: \"7\"\r\n    }\r\n]\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            chosenMood: null,\r\n            moodList: moodList,\r\n            pickedDate: Date.now(),\r\n            chosenActivities: []\r\n        };\r\n        \r\n    };\r\n    \r\n    chooseMood = ( e ) => {\r\n        let clickedMood = e.target.id\r\n        \r\n        this.setState({\r\n            chosenMood: clickedMood\r\n        }, () => { \r\n            console.log( this.state.chosenMood )\r\n        })\r\n    };\r\n\r\n    //function for getting moodLog from the localStorage\r\n    getMoodLog = () => JSON.parse(localStorage.getItem( 'moodLog' ));\r\n    \r\n    // count how many times a mood item is clicked on\r\n    moodCounter = () => {\r\n        const { chosenMood } = this.state\r\n        \r\n        const moodLog = this.getMoodLog()\r\n        \r\n        // if mood item in localStorage is the same as the item I clicked on,\r\n        // ( aka the state ), return it \r\n        const moodCount = moodLog.filter( e => e.mood === chosenMood )\r\n        console.log( moodCount.length ) \r\n    };\r\n\r\n    pickActivities = ( e ) => {\r\n        const { chosenActivities } = this.state \r\n        \r\n        \r\n        let clickedActivity = e.target.id\r\n        \r\n        // Cannot prevent default because event needs to bubble up for bootstrap, instead return\r\n        //e.preventDefault()\r\n        if ( clickedActivity === \"\" ) return\r\n\r\n        if ( chosenActivities.includes( clickedActivity ) ) {\r\n            let uniqueActivities = chosenActivities.filter( ( activity ) => {\r\n                return activity !== clickedActivity\r\n            })\r\n            \r\n            this.setState({\r\n                chosenActivities: uniqueActivities\r\n            })\r\n            \r\n        } else {\r\n            let updatedActivities = chosenActivities.concat( clickedActivity )\r\n\r\n            this.setState({\r\n                chosenActivities: updatedActivities\r\n            }, () => {\r\n                console.log( this.state.chosenActivities )\r\n            })  \r\n        }\r\n    } \r\n\r\n    resetValues = () => {\r\n        this.setState({\r\n            chosenMood: null,\r\n            chosenActivities: []\r\n        })\r\n    }\r\n    \r\n    prepareBarChart = () => {\r\n        const { moodList } = this.state\r\n        \r\n        const moodLog = this.getMoodLog()\r\n        \r\n        if ( moodLog === null ) {\r\n            return moodList.map( entry => {\r\n                return { x: entry.label, y: 0 }\r\n            })\r\n\r\n            /*\r\n                if in oneliner you want to return an object, wrap it in '()',\r\n                otherwise the {} of the object will clash with the {} of the function\r\n                \r\n                return moodList.map( entry => ( { x: entry.label, y : 0 } ) )\r\n            */\r\n        }\r\n\r\n        return moodList.map( entry => {\r\n            const moods = moodLog.filter( item => {\r\n                if ( entry.label === item.mood ) {\r\n                    return true\r\n                }\r\n            })\r\n            \r\n            return { x: entry.label, y: moods.length }\r\n        })\r\n    };\r\n    \r\n    /*     \r\n    prepareLineChart = () => {\r\n        const moodLog = this.getMoodLog()\r\n\r\n        if ( !moodLog ) {\r\n            return []\r\n        }\r\n\r\n        return moodLog.map( entry => {            \r\n            let fullDate = new Date(entry.date).toLocaleDateString().split(\"/\")\r\n\r\n            return { x: ( fullDate[1] ), y: entry.mood }\r\n        })\r\n    }; \r\n    */\r\n\r\n    handleChange = ( date ) => {\r\n        this.setState({\r\n            pickedDate: Date.parse( date )\r\n        }, () => {\r\n            console.log( this.state.pickedDate )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { moodList, chosenMood, pickedDate, chosenActivities } = this.state\r\n        \r\n        return (\r\n            <Container>\r\n                <Navigation />\r\n                <Route \r\n                    exact \r\n                    path=\"/\" \r\n                    render={ (props) => \r\n                        <StartPage \r\n                            chooseMood={ this.chooseMood } \r\n                            moodList={ moodList }\r\n                            chosenMood={ chosenMood }\r\n                            pickedDate={ pickedDate }\r\n                            onChange={ this.handleChange }\r\n                        />\r\n                    } \r\n                />\r\n                <Route \r\n                    exact \r\n                    path=\"/entries\" \r\n                    render={ (props) => \r\n                        <Entries \r\n                            getMoodLog={ this.getMoodLog }\r\n                            moodList={ moodList }\r\n                            chosenMood={ chosenMood }\r\n                            pickedDate={ pickedDate }\r\n                        />\r\n                    } \r\n                />\r\n                <Route \r\n                    path=\"/stats\" \r\n                    render={ (props) => \r\n                        <Stats\r\n                            moodCounter={ this.moodCounter }\r\n                            moodLog={ this.getMoodLog() }\r\n                            barData={ this.prepareBarChart() }\r\n                        />\r\n                    } \r\n                />\r\n                <EntryLogger \r\n                        moodList={ moodList }\r\n                        chosenMood={ chosenMood }\r\n                        pickedDate={ pickedDate }\r\n                        moodCounter={ this.moodCounter }\r\n                        getMoodLog={ this.getMoodLog }\r\n                        basicActivities={ basicActivities }\r\n                        chosenActivities={ chosenActivities }\r\n                        pickActivities={ this.pickActivities }\r\n                        resetValues={ this.resetValues }\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n        <App />\r\n    </BrowserRouter>, \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}